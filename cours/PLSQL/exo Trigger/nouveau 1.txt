drop table if exists date_evenement_detail;

CREATE TABLE date_evenement_detail (
	id_event SERIAL REFERENCES evenement (id_event),
	heure_24 time,
	heure numeric,
	minute_ev numeric,
	seconde numeric,
	jour_libelle character varying,
	jour numeric,
	mois numeric,
	annee numeric,
	n_semaine numeric,
	n_trimestre numeric,
	n_semestre numeric
    );
	
/*cr√©ation de la fonction*/	
create or replace function remplissage_tab()
   returns trigger language plpgsql
  as
$$
DECLARE
event_d_date timestamp;
v_id_ev integer;
	v_heure_24 time;
	v_heure numeric;
	v_minute_ev numeric;
	v_seconde numeric;
	v_jour_libelle character varying;
	v_jour numeric;
	v_mois numeric;
	v_annee numeric;
	v_n_semaine numeric;
	v_n_trimestre numeric;
	v_n_semestre numeric;
BEGIN





select into event_d_date date_event from evenement;
select into v_id_ev id_event from evenement;
select into v_heure_24 cast(event_d_date as time);
select into v_heure extract ('hour' from event_d_date);
select into v_minute_ev extract ('minute' from event_d_date);
select into v_seconde extract ('second' from event_d_date);
select into v_jour_libelle To_Char(event_d_date, 'Day');
select into v_jour extract ('day' from event_d_date);
select into v_mois extract ('month' from event_d_date);
select into v_annee extract ('year' from event_d_date);
select into v_n_semaine DATE_PART('week',event_d_date);
select into v_n_trimestre EXTRACT(QUARTER FROM event_d_date);


insert into date_evenement_detail (id_event ,
	heure_24,
	heure,
	minute_ev,
	seconde,
	jour_libelle,
	jour,
	mois,
	annee,
	n_semaine,
	n_trimestre) values ('v_id_event' integer ,
	'v_heure_24',
	'v_heure',
	'v_minute_ev',
	'v_seconde',
	'v_jour_libelle',
	'v_jour',
	'v_mois',
	'v_annee',
	'v_n_semaine',
	'v_n_trimestre');


return null;
end;
$$

CREATE TRIGGER trig_remplissage AFTER INSERT ON evenement
    FOR EACH ROW EXECUTE FUNCTION remplissage_tab();

insert into evenement (id_event, type_event,date_event) values(1,'CONCERT','2018-06-22 19:10:25-07');
